{"version":3,"sources":["components/MovieCard.js","services/movieData.js","services/movieAPI.js","components/Loading.js","components/MovieForm.js","pages/MovieList.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","this","props","title","storyline","imagePath","id","data-testid","className","alt","src","to","React","Component","movies","subtitle","rating","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","getMovie","movieId","find","mov","parseInt","Promise","resolve","setTimeout","Loading","MovieForm","state","handleSubmit","bind","onSubmit","field","newValue","setState","placeholder","type","value","onChange","event","updateMovie","target","htmlFor","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","MovieList","then","style","textAlign","map","key","MovieDetails","isShouldRedirect","onChangeRedirect","movieAPI","match","params","filter","status","NewMovie","shouldRedirect","newMovie","movieData","nextId","length","history","push","EditMovie","updatedMovie","NotFound","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae052466.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const {\n      title, storyline, imagePath, id,\n    } = movie;\n    return (      \n      <div data-testid=\"movie-card\">\n        <div className=\"col s3 m3\">\n          <div className=\"card movie-card blue-grey darken-1\">\n            <div className=\"card-image\">\n              <img alt=\"Movie Cover\" className=\"movie-card-image\" src={imagePath} />\n              <span className=\"card-title\">{title}</span>\n            </div>\n            <div className=\"card-content white-text\">\n              <p>{storyline}</p>\n            </div>\n            <div className=\"card-action\">\n              <Link to={`/movies/${id}`}>VER DETALHES</Link>\n            </div>\n          </div>\n        </div>\n      </div>     \n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n    id: PropTypes.number,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    setTimeout(() => {\n      const movies = readMovies();\n      resolve(movies);\n    }, 2000);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(movie);\n    }, 2000);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => {\n  const movies = readMovies().map((movie) => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie, ...updatedMovie };\n    }\n    return movie;\n  });\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const createMovie = (movieData) => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData, id: nextId };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ status: 'OK' });\n    }, 1000);\n  });\n};\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"input-field col s12\">\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={title}\n            onChange={(event) => this.updateMovie('title', event.target.value)}\n          />\n          <label className=\"active\" htmlFor=\"movie_title\">Título</label>\n        </div>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"input-field col s12\">\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            className=\"validate\"\n            value={subtitle}\n            onChange={(event) => this.updateMovie('subtitle', event.target.value)}\n          />\n          <label className=\"active\" htmlFor=\"movie_subtitle\">Subtítulo</label>\n        </div>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"input-field col s12\">\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            className=\"validate\"\n            value={imagePath}\n            onChange={(event) => this.updateMovie('imagePath', event.target.value)}\n          />\n          <label className=\"active\" htmlFor=\"movie_image\">Imagem</label>\n        </div>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"input-field col s12\">\n          <textarea\n            id=\"movie_storyline\"\n            className=\"materialize-textarea\"\n            value={storyline}\n            onChange={(event) => this.updateMovie('storyline', event.target.value)}\n          />\n          <label className=\"active\" htmlFor=\"movie_storyline\">Sinopse</label>\n        </div>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n\n    return (\n      <div className=\"row col\">\n        <label htmlFor=\"movie_genre\" className=\"active\" >Gênero</label>\n        <select\n          className=\"browser-default\"\n          value={genre}\n          onChange={(event) => this.updateMovie('genre', event.target.value)}\n          id=\"movie_genre\"\n        >\n          <option value=\"action\">Ação</option>\n          <option value=\"comedy\">Comédia</option>\n          <option value=\"thriller\">Suspense</option>\n          <option value=\"fantasy\">Fantasia</option>\n        </select>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"input-field col s12\">\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            className=\"form-control\"\n            step={0.1}\n            min={0}\n            max={5}\n            value={rating}\n            onChange={(event) => this.updateMovie('rating', event.target.value)}\n          />\n          <label className=\"active\" htmlFor=\"movie_rating\">Avaliação</label>\n        </div>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div className=\"row\">\n        <button\n          className=\"btn waves-effect waves-light\"\n          type=\"button\"\n          onClick={this.handleSubmit}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"movie-form\">\n        <div className=\"row\">\n          <form className=\"col s12\">\n            {this.renderTitleInput()}\n            {this.renderSubtitleInput()}\n            {this.renderImagePathInput()}\n            {this.renderStorylineInput()}\n            {this.renderGenreSelection()}\n            {this.renderRatingInput()}\n            {this.renderSubmitButton()}\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    rating: PropTypes.number,\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    imagePath: PropTypes.string,\n    storyline: PropTypes.string,\n    genre: PropTypes.string,\n  }).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { movies: '' };\n  }\n\n  componentDidMount() {\n    movieAPI.getMovies()\n      .then((movies) => this.setState(\n        { movies },\n      ));\n  }\n\n  render() {\n    const { movies } = this.state;\n    if (!movies) return <Loading />;\n    return (\n      <div data-testid=\"movie-list\">\n        <div style={{ textAlign: 'center' }}>\n          <Link to=\"/movies/new\" className=\"card-action\">ADICIONAR CARTÃO</Link>\n        </div>\n        <div className=\"row\">\n          {movies.map((movie) => <MovieCard key={movie.title} movie={movie} />)}\n        </div>\n\n      </div>\n\n\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, Redirect } from 'react-router-dom';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: '',\n      isShouldRedirect: false,\n    };\n\n    this.onChangeRedirect = this.onChangeRedirect.bind(this);\n  }\n\n  componentDidMount() {\n    movieAPI.getMovie(this.props.match.params.id)\n      .then((movie) => this.setState({ movie }));\n  }\n\n  onChangeRedirect() {\n    const { id } = this.state.movie;\n    movieAPI.deleteMovie(id);\n    this.setState({\n      isShouldRedirect: true,\n    });\n  }\n\n  render() {\n    const { movie, isShouldRedirect } = this.state;\n    const {\n      title, storyline, imagePath, genre, rating, subtitle, id,\n    } = movie;\n\n    if (isShouldRedirect) return <Redirect to=\"/\" />;\n\n    if (!movie) return <Loading />;\n\n    return (\n      <div className=\"row\" data-testid=\"movie-details\">\n        <div className=\"col s12 m7\">\n          <div className=\"card\">\n            <div className=\"card-image\">\n              <img alt=\"Movie Cover\" src={`../${imagePath}`} />\n              <span className=\"card-title\">{title}</span>\n            </div>\n            <div className=\"card-content\">\n              <p>{`Subtitle: ${subtitle}`}</p>\n              <p>{`Storyline: ${storyline}`}</p>\n              <p>{`Genre: ${genre}`}</p>\n              <p>{`Rating: ${rating}`}</p>\n            </div>\n            <div className=\"card-action\">\n              <Link to={`/movies/${id}/edit`}>EDITAR</Link>\n              <Link to=\"/\">VOLTAR</Link>\n              <button type=\"button\" onClick={this.onChangeRedirect}>DELETAR</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({ id: PropTypes.number }),\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = { shouldRedirect: false };\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n    const { history } = this.props;\n    if (shouldRedirect) {\n      history.push('/');\n    }\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { MovieForm, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'loading',\n      shouldRedirect: '',\n      movie: '',\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    movieAPI.getMovie(this.props.match.params.id)\n      .then((movie) => this.setState({\n        status: '',\n        shouldRedirect: '',\n        movie,\n      }));\n  }\n\n  componentDidUpdate() {\n    return (\n      <Redirect to=\"/\" />\n    );\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie);\n    this.setState({ status: '', shouldRedirect: true, movie: updatedMovie });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return (\n        <Redirect to=\"/\" />\n      );\n    }\n\n    if (status === 'loading') {\n      return (\n        <Loading />\n      );\n    }\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={movie} onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({ id: PropTypes.number }),\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\nimport './materialize.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router basename=\"/movie-cards\">\n      <main>\n        <Switch>\n          <Route exact path=\"/\" component={MovieList} />\n          <Route exact path=\"/movies/new\" component={NewMovie} />\n          <Route exact path=\"/movies/:id/edit\" component={EditMovie} />\n          <Route exact path=\"/movies/:id\" component={MovieDetails} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}